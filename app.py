from flask import Flask, request, jsonify
from flask_cors import CORS
import requests
import json


app = Flask(__name__)
CORS(app)


API_KEY = "Zxc7fGdHwrTjXRnEPEpimT7eMne5zdvFhcbfhQ7r83562080"
API_URL = "https://teachgpt.ssis.nu/api/v1/chat/completions"


conversations = {}


# Ut√∂kad systemmeddelande med information om reseplaneringsverktyget
SYSTEM_MESSAGE = """Du √§r TravelBuddy, en v√§nlig och kunnig AI-reseplanerare.
N√§r du svarar, f√∂lj dessa riktlinjer f√∂r tydlig formattering:


1. Dela upp l√•nga svar i kortare stycken
2. Anv√§nd punktlistor f√∂r uppr√§kningar
3. Anv√§nd fetstil (**) sparsamt och bara f√∂r riktigt viktiga nyckelord
4. N√§r du listar platser eller aktiviteter, anv√§nd numrerade listor
5. Anv√§nd emojis sparsamt f√∂r att g√∂ra texten mer levande


Till exempel:
"H√§r √§r tre rekommenderade platser:


1. Plats A - Kort beskrivning üèñÔ∏è
2. Plats B - Kort beskrivning üè∞
3. Plats C - Kort beskrivning üåÖ


Praktiska tips:
‚Ä¢ Tips 1
‚Ä¢ Tips 2
‚Ä¢ Tips 3"


Var alltid positiv och entusiastisk n√§r du pratar om resor.
Ge specifika och praktiska r√•d. N√§r du f√∂resl√•r resm√•l, f√∂rklara varf√∂r de skulle passa anv√§ndaren.


KUNSKAP OM RESEPLANERAREN:
TravelBuddy webbplatsen har en reseplanerare med f√∂ljande funktioner:
- Anv√§ndare kan l√§gga till resor med destinationer, datum, och budget
- Varje destination kan ha flera transports√§tt (flyg, t√•g, bil, buss, b√•t)
- Anv√§ndare kan l√§gga till boende f√∂r varje destination (hotell, l√§genhet, villa, vandrarhem)
- Aktiviteter kan l√§ggas till med kategori, datum, tid och kostnad
- Planeraren st√∂djer √§ven f√∂rs√§kringsinformation
- Alla resor sparas i anv√§ndarens profil
- Anv√§ndaren kan exportera resedetaljer till en textfil
- Anv√§ndaren kan redigera eller ta bort sparade resor


N√§r anv√§ndare fr√•gar om hur de kan planera sin resa, h√§nvisa dem till reseplaneringsverktyget och f√∂rklara hur det kan hj√§lpa dem organisera transporter, boende och aktiviteter. Om de har specifika fr√•gor om funktioner, guida dem till relevant del av verktyget."""


WELCOME_MESSAGE = """Hej! Jag √§r TravelBuddy, din personliga reseplanerare! üëã‚úàÔ∏è


Jag kan hj√§lpa dig med:
‚Ä¢ Reseinspiration och f√∂rslag p√• destinationer
‚Ä¢ Reseplanering och praktiska tips
‚Ä¢ Budgetr√•d och kostnadsuppskattningar
‚Ä¢ Lokala tips om sev√§rdheter och aktiviteter
‚Ä¢ Packlistor och reserekommendationer


Du kan ocks√• anv√§nda v√•r **reseplanerare** f√∂r att skapa detaljerade resplaner med destinationer, boende, aktiviteter och mer!


Vart dr√∂mmer du om att resa? Ber√§tta mer s√• hj√§lper jag dig planera din perfekta resa! üåé"""


# Funktion f√∂r att extrahera anv√§ndarens reseprofil om den finns tillg√§nglig
def get_user_profile(session_id):
    try:
        # H√§mta anv√§ndarprofilinformation fr√•n localStorage via frontend
        # Detta skulle kr√§va att frontend skickar denna information i f√∂rfr√•gan
        profile_info = request.json.get('profile_info', None)
        if profile_info:
            return profile_info
        return None
    except Exception as e:
        print(f"Fel vid h√§mtning av anv√§ndarprofil: {str(e)}")
        return None


@app.route('/chat', methods=['POST'])
def chat():
    try:
        print("Fick meddelande fr√•n frontend:", request.json)
        user_message = request.json.get('message', '')
        session_id = request.json.get('session_id', 'default')
       
        # Hantera f√∂rsta meddelandet
        if session_id not in conversations:
            conversations[session_id] = [
                {
                    "role": "system",
                    "content": SYSTEM_MESSAGE
                }
            ]
            return jsonify({
                'response': WELCOME_MESSAGE,
                'is_welcome': True
            })
           
        # Om anv√§ndarens meddelande √§r tomt, returnera bara v√§lkomstmeddelandet
        if not user_message.strip():
            return jsonify({
                'response': WELCOME_MESSAGE,
                'is_welcome': True
            })
           
        # Anpassa anv√§ndarmeddelandet med profilkontext endast om relevant
        profile_context = ""
        try:
            # F√∂rs√∂k h√§mta reseprofilinformation om det finns
            profile_info = request.json.get('profile_info')
            if profile_info and isinstance(profile_info, dict):
                # Bygger enkel profilkontext med s√§ker felhantering
                profile_parts = []
                if profile_info.get('travelExperience'):
                    profile_parts.append(f"Resvana: {profile_info.get('travelExperience')}")
                if profile_info.get('travelStyle'):
                    profile_parts.append(f"Resestil: {profile_info.get('travelStyle')}")
                if profile_parts:
                    profile_context = "Min reseprofil: " + ", ".join(profile_parts)
        except Exception as e:
            print(f"Fel vid hantering av profil: {str(e)}")
           
        # Hantera sparade resor
        trips_context = ""
        try:
            # H√§mta information om sparade resor om tillg√§ngligt och relevant
            saved_trips = request.json.get('saved_trips')
            if saved_trips and isinstance(saved_trips, list) and len(saved_trips) > 0:
                if "tidigare" in user_message.lower() or "sparad" in user_message.lower() or "mina resor" in user_message.lower():
                    destinations = []
                    for trip in saved_trips:
                        if isinstance(trip, dict) and 'destinations' in trip:
                            for dest in trip.get('destinations', []):
                                if isinstance(dest, dict) and dest.get('name'):
                                    destinations.append(dest.get('name'))
                   
                    if destinations:
                        dest_list = ", ".join(destinations[:5])
                        if len(destinations) > 5:
                            dest_list += f" och {len(destinations) - 5} till"
                        trips_context = f"Jag har {len(saved_trips)} sparade resor till {dest_list}."
        except Exception as e:
            print(f"Fel vid hantering av sparade resor: {str(e)}")
           
        # L√§gg till kontext till anv√§ndarens meddelande om det finns
        enhanced_message = user_message
        if profile_context and "profil" in user_message.lower():
            enhanced_message += f"\n\n{profile_context}"
        if trips_context:
            enhanced_message += f"\n\n{trips_context}"
       
        conversations[session_id].append({
            "role": "user",
            "content": enhanced_message
        })
       
        response = requests.post(
            API_URL,
            headers={
                'Authorization': f'Bearer {API_KEY}',
                'Content-Type': 'application/json'
            },
            json={
                "model": "Meta-Llama-3.3-70B-Instruct-AWQ",
                "messages": conversations[session_id]
            }
        )
       
        if response.status_code == 200:
            bot_reply = response.json()['choices'][0]['message']['content']
            conversations[session_id].append({
                "role": "assistant",
                "content": bot_reply
            })
           
            return jsonify({
                'response': bot_reply,
                'is_welcome': False
            })
        else:
            return jsonify({'error': str(response.text)}), response.status_code
           
    except Exception as e:
        print(f"Fel: {str(e)}")
        return jsonify({'error': str(e)}), 500


@app.route('/reset', methods=['POST'])
def reset_conversation():
    try:
        session_id = request.json.get('session_id', 'default')
        if session_id in conversations:
            del conversations[session_id]
        return jsonify({'status': 'success', 'message': 'Konversation √•terst√§lld'})
    except Exception as e:
        return jsonify({'error': str(e)}), 500


if __name__ == '__main__':
    print("Startar server...")
    print(f"API_KEY √§r {'INTE SATT' if API_KEY == 'din-api-nyckel-h√§r' else 'satt'}")
    app.run(debug=True, port=5001)
else:
    # Detta anv√§nds av Gunicorn i produktion
    application = app

